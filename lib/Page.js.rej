***************
*** 18,31 ****
  const EventEmitter = require('events');
  const mime = require('mime');
  const {NetworkManager} = require('./NetworkManager');
- const NavigatorWatcher = require('./NavigatorWatcher');
- const Dialog = require('./Dialog');
- const EmulationManager = require('./EmulationManager');
  const {FrameManager} = require('./FrameManager');
  const {Keyboard, Mouse, Touchscreen} = require('./Input');
  const Tracing = require('./Tracing');
- const {helper, debugError} = require('./helper');
  const {Coverage} = require('./Coverage');
  
  const writeFileAsync = helper.promisify(fs.writeFile);
  
--- 18,32 ----
  const EventEmitter = require('events');
  const mime = require('mime');
  const {NetworkManager} = require('./NetworkManager');
+ const {Dialog} = require('./Dialog');
+ const {EmulationManager} = require('./EmulationManager');
  const {FrameManager} = require('./FrameManager');
  const {Keyboard, Mouse, Touchscreen} = require('./Input');
  const Tracing = require('./Tracing');
+ const {helper, debugError, assert} = require('./helper');
  const {Coverage} = require('./Coverage');
+ const {Worker} = require('./Worker');
+ const {createJSHandle} = require('./ExecutionContext');
  
  const writeFileAsync = helper.promisify(fs.writeFile);
  
***************
*** 34,50 ****
     * @param {!Puppeteer.CDPSession} client
     * @param {!Puppeteer.Target} target
     * @param {boolean} ignoreHTTPSErrors
-    * @param {boolean} setDefaultViewport
     * @param {!Puppeteer.TaskQueue} screenshotTaskQueue
     * @return {!Promise<!Page>}
     */
-   static async create(client, target, ignoreHTTPSErrors, setDefaultViewport, screenshotTaskQueue) {
  
      await client.send('Page.enable');
      const {frameTree} = await client.send('Page.getFrameTree');
      const page = new Page(client, target, frameTree, ignoreHTTPSErrors, screenshotTaskQueue);
  
      await Promise.all([
        client.send('Page.setLifecycleEventsEnabled', { enabled: true }),
        client.send('Network.enable', {}),
        client.send('Runtime.enable', {}),
--- 35,52 ----
     * @param {!Puppeteer.CDPSession} client
     * @param {!Puppeteer.Target} target
     * @param {boolean} ignoreHTTPSErrors
+    * @param {?Puppeteer.Viewport} defaultViewport
     * @param {!Puppeteer.TaskQueue} screenshotTaskQueue
     * @return {!Promise<!Page>}
     */
+   static async create(client, target, ignoreHTTPSErrors, defaultViewport, screenshotTaskQueue) {
  
      await client.send('Page.enable');
      const {frameTree} = await client.send('Page.getFrameTree');
      const page = new Page(client, target, frameTree, ignoreHTTPSErrors, screenshotTaskQueue);
  
      await Promise.all([
+       client.send('Target.setAutoAttach', {autoAttach: true, waitForDebuggerOnStart: false}),
        client.send('Page.setLifecycleEventsEnabled', { enabled: true }),
        client.send('Network.enable', {}),
        client.send('Runtime.enable', {}),
***************
*** 55,62 ****
      if (ignoreHTTPSErrors)
        await client.send('Security.setOverrideCertificateErrors', {override: true});
      // Initialize default page size.
-     if (setDefaultViewport)
-       await page.setViewport({width: 800, height: 600});
  
      return page;
    }
--- 57,64 ----
      if (ignoreHTTPSErrors)
        await client.send('Security.setOverrideCertificateErrors', {override: true});
      // Initialize default page size.
+     if (defaultViewport)
+       await page.setViewport(defaultViewport);
  
      return page;
    }
***************
*** 70,92 ****
     */
    constructor(client, target, frameTree, ignoreHTTPSErrors, screenshotTaskQueue) {
      super();
      this._client = client;
      this._target = target;
      this._keyboard = new Keyboard(client);
      this._mouse = new Mouse(client, this._keyboard);
      this._touchscreen = new Touchscreen(client, this._keyboard);
-     this._frameManager = new FrameManager(client, frameTree, this);
-     this._networkManager = new NetworkManager(client, this._frameManager);
      this._emulationManager = new EmulationManager(client);
      this._tracing = new Tracing(client);
      /** @type {!Map<string, Function>} */
      this._pageBindings = new Map();
      this._ignoreHTTPSErrors = ignoreHTTPSErrors;
      this._coverage = new Coverage(client);
-     this._defaultNavigationTimeout = 180000;
  
      this._screenshotTaskQueue = screenshotTaskQueue;
  
      this._frameManager.on(FrameManager.Events.FrameAttached, event => this.emit(Page.Events.FrameAttached, event));
      this._frameManager.on(FrameManager.Events.FrameDetached, event => this.emit(Page.Events.FrameDetached, event));
      this._frameManager.on(FrameManager.Events.FrameNavigated, event => this.emit(Page.Events.FrameNavigated, event));
--- 72,123 ----
     */
    constructor(client, target, frameTree, ignoreHTTPSErrors, screenshotTaskQueue) {
      super();
+     this._closed = false;
      this._client = client;
      this._target = target;
      this._keyboard = new Keyboard(client);
      this._mouse = new Mouse(client, this._keyboard);
      this._touchscreen = new Touchscreen(client, this._keyboard);
+     this._networkManager = new NetworkManager(client);
+     /** @type {!FrameManager} */
+     this._frameManager = new FrameManager(client, frameTree, this, this._networkManager);
+     this._networkManager.setFrameManager(this._frameManager);
      this._emulationManager = new EmulationManager(client);
      this._tracing = new Tracing(client);
      /** @type {!Map<string, Function>} */
      this._pageBindings = new Map();
      this._ignoreHTTPSErrors = ignoreHTTPSErrors;
      this._coverage = new Coverage(client);
+     this._javascriptEnabled = true;
+     /** @type {?Puppeteer.Viewport} */
+     this._viewport = null;
  
      this._screenshotTaskQueue = screenshotTaskQueue;
  
+     /** @type {!Map<string, Worker>} */
+     this._workers = new Map();
+     client.on('Target.attachedToTarget', event => {
+       if (event.targetInfo.type !== 'worker') {
+         // If we don't detach from service workers, they will never die.
+         client.send('Target.detachFromTarget', {
+           sessionId: event.sessionId
+         }).catch(debugError);
+         return;
+       }
+       const session = client._createSession(event.targetInfo.type, event.sessionId);
+       const worker = new Worker(session, event.targetInfo.url, this._addConsoleMessage.bind(this), this._handleException.bind(this));
+       this._workers.set(event.sessionId, worker);
+       this.emit(Page.Events.WorkerCreated, worker);
+ 
+     });
+     client.on('Target.detachedFromTarget', event => {
+       const worker = this._workers.get(event.sessionId);
+       if (!worker)
+         return;
+       this.emit(Page.Events.WorkerDestroyed, worker);
+       this._workers.delete(event.sessionId);
+     });
+ 
      this._frameManager.on(FrameManager.Events.FrameAttached, event => this.emit(Page.Events.FrameAttached, event));
      this._frameManager.on(FrameManager.Events.FrameDetached, event => this.emit(Page.Events.FrameDetached, event));
      this._frameManager.on(FrameManager.Events.FrameNavigated, event => this.emit(Page.Events.FrameNavigated, event));
***************
*** 99,111 ****
      client.on('Page.domContentEventFired', event => this.emit(Page.Events.DOMContentLoaded));
      client.on('Page.loadEventFired', event => this.emit(Page.Events.Load));
      client.on('Runtime.consoleAPICalled', event => this._onConsoleAPI(event));
      client.on('Page.javascriptDialogOpening', event => this._onDialog(event));
      client.on('Runtime.exceptionThrown', exception => this._handleException(exception.exceptionDetails));
      client.on('Security.certificateError', event => this._onCertificateError(event));
      client.on('Inspector.targetCrashed', event => this._onTargetCrashed());
      client.on('Performance.metrics', event => this._emitMetrics(event));
      client.on('Log.entryAdded', event => this._onLogEntryAdded(event));
-     this._target._isClosedPromise.then(() => this.emit(Page.Events.Close));
    }
  
    /**
--- 130,160 ----
      client.on('Page.domContentEventFired', event => this.emit(Page.Events.DOMContentLoaded));
      client.on('Page.loadEventFired', event => this.emit(Page.Events.Load));
      client.on('Runtime.consoleAPICalled', event => this._onConsoleAPI(event));
+     client.on('Runtime.bindingCalled', event => this._onBindingCalled(event));
      client.on('Page.javascriptDialogOpening', event => this._onDialog(event));
      client.on('Runtime.exceptionThrown', exception => this._handleException(exception.exceptionDetails));
      client.on('Security.certificateError', event => this._onCertificateError(event));
      client.on('Inspector.targetCrashed', event => this._onTargetCrashed());
      client.on('Performance.metrics', event => this._emitMetrics(event));
      client.on('Log.entryAdded', event => this._onLogEntryAdded(event));
+     this._target._isClosedPromise.then(() => {
+       this.emit(Page.Events.Close);
+       this._closed = true;
+     });
+   }
+ 
+   /**
+    * @param {!{longitude: number, latitude: number, accuracy: (number|undefined)}} options
+    */
+   async setGeolocation(options) {
+     const { longitude, latitude, accuracy = 0} = options;
+     if (longitude < -180 || longitude > 180)
+       throw new Error(`Invalid longitude "${longitude}": precondition -180 <= LONGITUDE <= 180 failed.`);
+     if (latitude < -90 || latitude > 90)
+       throw new Error(`Invalid latitude "${latitude}": precondition -90 <= LATITUDE <= 90 failed.`);
+     if (accuracy < 0)
+       throw new Error(`Invalid accuracy "${accuracy}": precondition 0 <= ACCURACY failed.`);
+     await this._client.send('Emulation.setGeolocationOverride', {longitude, latitude, accuracy});
    }
  
    /**
***************
*** 126,137 ****
      this.emit('error', new Error('Page crashed!'));
    }
  
    _onLogEntryAdded(event) {
-     const {level, text, args} = event.entry;
      if (args)
        args.map(arg => helper.releaseObject(this._client, arg));
- 
-     this.emit(Page.Events.Console, new ConsoleMessage(level, text));
    }
  
    /**
--- 175,189 ----
      this.emit('error', new Error('Page crashed!'));
    }
  
+   /**
+    * @param {!Protocol.Log.entryAddedPayload} event
+    */
    _onLogEntryAdded(event) {
+     const {level, text, args, source} = event.entry;
      if (args)
        args.map(arg => helper.releaseObject(this._client, arg));
+     if (source !== 'worker')
+       this.emit(Page.Events.Console, new ConsoleMessage(level, text));
    }
  
    /**
***************
*** 253,259 ****
     * @param {number} timeout
     */
    setDefaultNavigationTimeout(timeout) {
-     this._defaultNavigationTimeout = timeout;
    }
  
    /**
--- 312,318 ----
     * @param {number} timeout
     */
    setDefaultNavigationTimeout(timeout) {
+     this._frameManager.setDefaultNavigationTimeout(timeout);
    }
  
    /**
***************
*** 364,374 ****
        const item = Object.assign({}, cookie);
        if (!item.url && startsWithHTTP)
          item.url = pageURL;
-       console.assert(
            item.url !== 'about:blank',
            `Blank page can not have cookie "${item.name}"`
        );
-       console.assert(
            !String.prototype.startsWith.call(item.url || '', 'data:'),
            `Data URL page can not have cookie "${item.name}"`
        );
--- 423,433 ----
        const item = Object.assign({}, cookie);
        if (!item.url && startsWithHTTP)
          item.url = pageURL;
+       assert(
            item.url !== 'about:blank',
            `Blank page can not have cookie "${item.name}"`
        );
+       assert(
            !String.prototype.startsWith.call(item.url || '', 'data:'),
            `Data URL page can not have cookie "${item.name}"`
        );
***************
*** 400,414 ****
     * @param {function(?)} puppeteerFunction
     */
    async exposeFunction(name, puppeteerFunction) {
-     if (this._pageBindings[name])
        throw new Error(`Failed to add page binding with name ${name}: window['${name}'] already exists!`);
-     this._pageBindings[name] = puppeteerFunction;
  
      const expression = helper.evaluationString(addPageBinding, name);
      await this._client.send('Page.addScriptToEvaluateOnNewDocument', {source: expression});
      await Promise.all(this.frames().map(frame => frame.evaluate(expression).catch(debugError)));
  
      function addPageBinding(bindingName) {
        window[bindingName] = async(...args) => {
          const me = window[bindingName];
          let callbacks = me['callbacks'];
--- 459,475 ----
     * @param {function(?)} puppeteerFunction
     */
    async exposeFunction(name, puppeteerFunction) {
+     if (this._pageBindings.has(name))
        throw new Error(`Failed to add page binding with name ${name}: window['${name}'] already exists!`);
+     this._pageBindings.set(name, puppeteerFunction);
  
      const expression = helper.evaluationString(addPageBinding, name);
+     await this._client.send('Runtime.addBinding', {name: name});
      await this._client.send('Page.addScriptToEvaluateOnNewDocument', {source: expression});
      await Promise.all(this.frames().map(frame => frame.evaluate(expression).catch(debugError)));
  
      function addPageBinding(bindingName) {
+       const binding = window[bindingName];
        window[bindingName] = async(...args) => {
          const me = window[bindingName];
          let callbacks = me['callbacks'];
***************
*** 419,426 ****
          const seq = (me['lastSeq'] || 0) + 1;
          me['lastSeq'] = seq;
          const promise = new Promise(fulfill => callbacks.set(seq, fulfill));
-         // eslint-disable-next-line no-console
-         console.debug('driver:page-binding', JSON.stringify({name: bindingName, seq, args}));
          return promise;
        };
      }
--- 480,486 ----
          const seq = (me['lastSeq'] || 0) + 1;
          me['lastSeq'] = seq;
          const promise = new Promise(fulfill => callbacks.set(seq, fulfill));
+         binding(JSON.stringify({name: bindingName, seq, args}));
          return promise;
        };
      }
***************
*** 483,518 ****
     */
    _handleException(exceptionDetails) {
      const message = helper.getExceptionMessage(exceptionDetails);
-     this.emit(Page.Events.PageError, new Error(message));
    }
  
    async _onConsoleAPI(event) {
-     if (event.type === 'debug' && event.args.length && event.args[0].value === 'driver:page-binding') {
-       const {name, seq, args} = JSON.parse(event.args[1].value);
-       const result = await this._pageBindings[name](...args);
-       const expression = helper.evaluationString(deliverResult, name, seq, result);
-       this._client.send('Runtime.evaluate', { expression, contextId: event.executionContextId }).catch(debugError);
- 
-       function deliverResult(name, seq, result) {
-         window[name]['callbacks'].get(seq)(result);
-         window[name]['callbacks'].delete(seq);
-       }
-       return;
      }
      if (!this.listenerCount(Page.Events.Console)) {
-       event.args.map(arg => helper.releaseObject(this._client, arg));
        return;
      }
-     const values = event.args.map(arg => this._frameManager.createJSHandle(event.executionContextId, arg));
      const textTokens = [];
-     for (let i = 0; i < event.args.length; ++i) {
-       const remoteObject = event.args[i];
        if (remoteObject.objectId)
-         textTokens.push(values[i].toString());
        else
          textTokens.push(helper.valueFromRemoteObject(remoteObject));
      }
-     const message = new ConsoleMessage(event.type, textTokens.join(' '), values);
      this.emit(Page.Events.Console, message);
    }
  
--- 543,595 ----
     */
    _handleException(exceptionDetails) {
      const message = helper.getExceptionMessage(exceptionDetails);
+     const err = new Error(message);
+     err.stack = ''; // Don't report clientside error with a node stack attached
+     this.emit(Page.Events.PageError, err);
    }
  
+   /**
+    * @param {!Protocol.Runtime.consoleAPICalledPayload} event
+    */
    async _onConsoleAPI(event) {
+     const context = this._frameManager.executionContextById(event.executionContextId);
+     const values = event.args.map(arg => createJSHandle(context, arg));
+     this._addConsoleMessage(event.type, values);
+   }
+ 
+   /**
+    * @param {!Protocol.Runtime.bindingCalledPayload} event
+    */
+   async _onBindingCalled(event) {
+     const {name, seq, args} = JSON.parse(event.payload);
+     const result = await this._pageBindings.get(name)(...args);
+     const expression = helper.evaluationString(deliverResult, name, seq, result);
+     this._client.send('Runtime.evaluate', { expression, contextId: event.executionContextId }).catch(debugError);
+ 
+     function deliverResult(name, seq, result) {
+       window[name]['callbacks'].get(seq)(result);
+       window[name]['callbacks'].delete(seq);
      }
+   }
+ 
+   /**
+    * @param {string} type
+    * @param {!Array<!Puppeteer.JSHandle>} args
+    */
+   _addConsoleMessage(type, args) {
      if (!this.listenerCount(Page.Events.Console)) {
+       args.forEach(arg => arg.dispose());
        return;
      }
      const textTokens = [];
+     for (const arg of args) {
+       const remoteObject = arg._remoteObject;
        if (remoteObject.objectId)
+         textTokens.push(arg.toString());
        else
          textTokens.push(helper.valueFromRemoteObject(remoteObject));
      }
+     const message = new ConsoleMessage(type, textTokens.join(' '), args);
      this.emit(Page.Events.Console, message);
    }
  
***************
*** 526,532 ****
        dialogType = Dialog.Type.Prompt;
      else if (event.type === 'beforeunload')
        dialogType = Dialog.Type.BeforeUnload;
-     console.assert(dialogType, 'Unknown javascript dialog type: ' + event.type);
      const dialog = new Dialog(this._client, dialogType, event.message, event.defaultPrompt);
      this.emit(Page.Events.Dialog, dialog);
    }
--- 603,609 ----
        dialogType = Dialog.Type.Prompt;
      else if (event.type === 'beforeunload')
        dialogType = Dialog.Type.BeforeUnload;
+     assert(dialogType, 'Unknown javascript dialog type: ' + event.type);
      const dialog = new Dialog(this._client, dialogType, event.message, event.defaultPrompt);
      this.emit(Page.Events.Dialog, dialog);
    }
***************
*** 558,605 ****
     * @return {!Promise<?Puppeteer.Response>}
     */
    async goto(url, options = {}) {
-     const referrer = this._networkManager.extraHTTPHeaders()['referer'];
- 
-     /** @type {Map<string, !Puppeteer.Request>} */
-     const requests = new Map();
-     const eventListeners = [
-       helper.addEventListener(this._networkManager, NetworkManager.Events.Request, request => {
-         if (!requests.get(request.url()))
-           requests.set(request.url(), request);
-       })
-     ];
- 
-     const mainFrame = this._frameManager.mainFrame();
-     const timeout = typeof options.timeout === 'number' ? options.timeout : this._defaultNavigationTimeout;
-     const watcher = new NavigatorWatcher(this._frameManager, mainFrame, timeout, options);
-     const navigationPromise = watcher.navigationPromise();
-     let error = await Promise.race([
-       navigate(this._client, url, referrer),
-       navigationPromise,
-     ]);
-     if (!error)
-       error = await navigationPromise;
-     watcher.cancel();
-     helper.removeEventListeners(eventListeners);
-     if (error)
-       throw error;
-     const request = requests.get(mainFrame._navigationURL);
-     return request ? request.response() : null;
- 
-     /**
-      * @param {!Puppeteer.CDPSession} client
-      * @param {string} url
-      * @param {string} referrer
-      * @return {!Promise<?Error>}
-      */
-     async function navigate(client, url, referrer) {
-       try {
-         const response = await client.send('Page.navigate', {url, referrer});
-         return response.errorText ? new Error(`${response.errorText} at ${url}`) : null;
-       } catch (error) {
-         return error;
-       }
-     }
    }
  
    /**
--- 635,641 ----
     * @return {!Promise<?Puppeteer.Response>}
     */
    async goto(url, options = {}) {
+     return await this._frameManager.mainFrame().goto(url, options);
    }
  
    /**
***************
*** 616,635 ****
  
    /**
     * @param {!Object=} options
-    * @return {!Promise<!Puppeteer.Response>}
     */
    async waitForNavigation(options = {}) {
-     const mainFrame = this._frameManager.mainFrame();
-     const timeout = typeof options.timeout === 'number' ? options.timeout : this._defaultNavigationTimeout;
-     const watcher = new NavigatorWatcher(this._frameManager, mainFrame, timeout, options);
- 
-     const responses = new Map();
-     const listener = helper.addEventListener(this._networkManager, NetworkManager.Events.Response, response => responses.set(response.url(), response));
-     const error = await watcher.navigationPromise();
-     helper.removeEventListeners([listener]);
-     if (error)
-       throw error;
-     return responses.get(this.mainFrame().url()) || null;
    }
  
    /**
--- 652,693 ----
  
    /**
     * @param {!Object=} options
+    * @return {!Promise<?Puppeteer.Response>}
     */
    async waitForNavigation(options = {}) {
+     return await this._frameManager.mainFrame().waitForNavigation(options);
+   }
+ 
+   /**
+    * @param {(string|Function)} urlOrPredicate
+    * @param {!Object=} options
+    * @return {!Promise<!Puppeteer.Request>}
+    */
+   async waitForRequest(urlOrPredicate, options = {}) {
+     const timeout = typeof options.timeout === 'number' ? options.timeout : 30000;
+     return helper.waitForEvent(this._networkManager, NetworkManager.Events.Request, request => {
+       if (helper.isString(urlOrPredicate))
+         return (urlOrPredicate === request.url());
+       if (typeof urlOrPredicate === 'function')
+         return !!(urlOrPredicate(request));
+       return false;
+     }, timeout);
+   }
+ 
+   /**
+    * @param {(string|Function)} urlOrPredicate
+    * @param {!Object=} options
+    * @return {!Promise<!Puppeteer.Response>}
+    */
+   async waitForResponse(urlOrPredicate, options = {}) {
+     const timeout = typeof options.timeout === 'number' ? options.timeout : 30000;
+     return helper.waitForEvent(this._networkManager, NetworkManager.Events.Response, response => {
+       if (helper.isString(urlOrPredicate))
+         return (urlOrPredicate === response.url());
+       if (typeof urlOrPredicate === 'function')
+         return !!(urlOrPredicate(response));
+       return false;
+     }, timeout);
    }
  
    /**
***************
*** 682,687 ****
     * @param {boolean} enabled
     */
    async setJavaScriptEnabled(enabled) {
      await this._client.send('Emulation.setScriptExecutionDisabled', { value: !enabled });
    }
  
--- 740,748 ----
     * @param {boolean} enabled
     */
    async setJavaScriptEnabled(enabled) {
+     if (this._javascriptEnabled === enabled)
+       return;
+     this._javascriptEnabled = enabled;
      await this._client.send('Emulation.setScriptExecutionDisabled', { value: !enabled });
    }
  
***************
*** 696,707 ****
     * @param {?string} mediaType
     */
    async emulateMedia(mediaType) {
-     console.assert(mediaType === 'screen' || mediaType === 'print' || mediaType === null, 'Unsupported media type: ' + mediaType);
      await this._client.send('Emulation.setEmulatedMedia', {media: mediaType || ''});
    }
  
    /**
-    * @param {!Page.Viewport} viewport
     */
    async setViewport(viewport) {
      const needsReload = await this._emulationManager.emulateViewport(viewport);
--- 757,768 ----
     * @param {?string} mediaType
     */
    async emulateMedia(mediaType) {
+     assert(mediaType === 'screen' || mediaType === 'print' || mediaType === null, 'Unsupported media type: ' + mediaType);
      await this._client.send('Emulation.setEmulatedMedia', {media: mediaType || ''});
    }
  
    /**
+    * @param {!Puppeteer.Viewport} viewport
     */
    async setViewport(viewport) {
      const needsReload = await this._emulationManager.emulateViewport(viewport);
***************
*** 711,717 ****
    }
  
    /**
-    * @return {!Page.Viewport}
     */
    viewport() {
      return this._viewport;
--- 772,778 ----
    }
  
    /**
+    * @return {?Puppeteer.Viewport}
     */
    viewport() {
      return this._viewport;
***************
*** 745,758 ****
  
    /**
     * @param {!Object=} options
-    * @return {!Promise<!Buffer>}
     */
    async screenshot(options = {}) {
      let screenshotType = null;
      // options.type takes precedence over inferring the type from options.path
      // because it may be a 0-length file with no extension created beforehand (i.e. as a temp file).
      if (options.type) {
-       console.assert(options.type === 'png' || options.type === 'jpeg', 'Unknown options.type value: ' + options.type);
        screenshotType = options.type;
      } else if (options.path) {
        const mimeType = mime.getType(options.path);
--- 806,819 ----
  
    /**
     * @param {!Object=} options
+    * @return {!Promise<!Buffer|!String>}
     */
    async screenshot(options = {}) {
      let screenshotType = null;
      // options.type takes precedence over inferring the type from options.path
      // because it may be a 0-length file with no extension created beforehand (i.e. as a temp file).
      if (options.type) {
+       assert(options.type === 'png' || options.type === 'jpeg', 'Unknown options.type value: ' + options.type);
        screenshotType = options.type;
      } else if (options.path) {
        const mimeType = mime.getType(options.path);
***************
*** 760,783 ****
          screenshotType = 'png';
        else if (mimeType === 'image/jpeg')
          screenshotType = 'jpeg';
-       console.assert(screenshotType, 'Unsupported screenshot mime type: ' + mimeType);
      }
  
      if (!screenshotType)
        screenshotType = 'png';
  
      if (options.quality) {
-       console.assert(screenshotType === 'jpeg', 'options.quality is unsupported for the ' + screenshotType + ' screenshots');
-       console.assert(typeof options.quality === 'number', 'Expected options.quality to be a number but found ' + (typeof options.quality));
-       console.assert(Number.isInteger(options.quality), 'Expected options.quality to be an integer');
-       console.assert(options.quality >= 0 && options.quality <= 100, 'Expected options.quality to be between 0 and 100 (inclusive), got ' + options.quality);
      }
-     console.assert(!options.clip || !options.fullPage, 'options.clip and options.fullPage are exclusive');
      if (options.clip) {
-       console.assert(typeof options.clip.x === 'number', 'Expected options.clip.x to be a number but found ' + (typeof options.clip.x));
-       console.assert(typeof options.clip.y === 'number', 'Expected options.clip.y to be a number but found ' + (typeof options.clip.y));
-       console.assert(typeof options.clip.width === 'number', 'Expected options.clip.width to be a number but found ' + (typeof options.clip.width));
-       console.assert(typeof options.clip.height === 'number', 'Expected options.clip.height to be a number but found ' + (typeof options.clip.height));
      }
      return this._screenshotTaskQueue.postTask(this._screenshotTask.bind(this, screenshotType, options));
    }
--- 821,844 ----
          screenshotType = 'png';
        else if (mimeType === 'image/jpeg')
          screenshotType = 'jpeg';
+       assert(screenshotType, 'Unsupported screenshot mime type: ' + mimeType);
      }
  
      if (!screenshotType)
        screenshotType = 'png';
  
      if (options.quality) {
+       assert(screenshotType === 'jpeg', 'options.quality is unsupported for the ' + screenshotType + ' screenshots');
+       assert(typeof options.quality === 'number', 'Expected options.quality to be a number but found ' + (typeof options.quality));
+       assert(Number.isInteger(options.quality), 'Expected options.quality to be an integer');
+       assert(options.quality >= 0 && options.quality <= 100, 'Expected options.quality to be between 0 and 100 (inclusive), got ' + options.quality);
      }
+     assert(!options.clip || !options.fullPage, 'options.clip and options.fullPage are exclusive');
      if (options.clip) {
+       assert(typeof options.clip.x === 'number', 'Expected options.clip.x to be a number but found ' + (typeof options.clip.x));
+       assert(typeof options.clip.y === 'number', 'Expected options.clip.y to be a number but found ' + (typeof options.clip.y));
+       assert(typeof options.clip.width === 'number', 'Expected options.clip.width to be a number but found ' + (typeof options.clip.width));
+       assert(typeof options.clip.height === 'number', 'Expected options.clip.height to be a number but found ' + (typeof options.clip.height));
      }
      return this._screenshotTaskQueue.postTask(this._screenshotTask.bind(this, screenshotType, options));
    }
***************
*** 785,794 ****
    /**
     * @param {"png"|"jpeg"} format
     * @param {!Object=} options
-    * @return {!Promise<!Buffer>}
     */
    async _screenshotTask(format, options) {
-     //await this._client.send('Target.activateTarget', {targetId: this._target._targetId});
      let clip = options.clip ? Object.assign({}, options['clip']) : undefined;
      if (clip)
        clip.scale = 1;
--- 846,855 ----
    /**
     * @param {"png"|"jpeg"} format
     * @param {!Object=} options
+    * @return {!Promise<!Buffer|!String>}
     */
    async _screenshotTask(format, options) {
+     await this._client.send('Target.activateTarget', {targetId: this._target._targetId});
      let clip = options.clip ? Object.assign({}, options['clip']) : undefined;
      if (clip)
        clip.scale = 1;
***************
*** 800,823 ****
  
        // Overwrite clip for full page at all times.
        clip = { x: 0, y: 0, width, height, scale: 1 };
-       const mobile = this._viewport.isMobile || false;
-       const deviceScaleFactor = this._viewport.deviceScaleFactor || 1;
-       const landscape = this._viewport.isLandscape || false;
        /** @type {!Protocol.Emulation.ScreenOrientation} */
-       const screenOrientation = landscape ? { angle: 90, type: 'landscapePrimary' } : { angle: 0, type: 'portraitPrimary' };
-       await this._client.send('Emulation.setDeviceMetricsOverride', { mobile, width, height, deviceScaleFactor, screenOrientation });
      }
- 
-     if (options.omitBackground)
        await this._client.send('Emulation.setDefaultBackgroundColorOverride', { color: { r: 0, g: 0, b: 0, a: 0 } });
      const result = await this._client.send('Page.captureScreenshot', { format, quality: options.quality, clip });
-     if (options.omitBackground)
        await this._client.send('Emulation.setDefaultBackgroundColorOverride');
  
-     if (options.fullPage)
        await this.setViewport(this._viewport);
  
-     const buffer = Buffer.from(result.data, 'base64');
      if (options.path)
        await writeFileAsync(options.path, buffer);
      return buffer;
--- 861,886 ----
  
        // Overwrite clip for full page at all times.
        clip = { x: 0, y: 0, width, height, scale: 1 };
+       const {
+         isMobile = false,
+         deviceScaleFactor = 1,
+         isLandscape = false
+       } = this._viewport || {};
        /** @type {!Protocol.Emulation.ScreenOrientation} */
+       const screenOrientation = isLandscape ? { angle: 90, type: 'landscapePrimary' } : { angle: 0, type: 'portraitPrimary' };
+       await this._client.send('Emulation.setDeviceMetricsOverride', { mobile: isMobile, width, height, deviceScaleFactor, screenOrientation });
      }
+     const shouldSetDefaultBackground = options.omitBackground && format === 'png';
+     if (shouldSetDefaultBackground)
        await this._client.send('Emulation.setDefaultBackgroundColorOverride', { color: { r: 0, g: 0, b: 0, a: 0 } });
      const result = await this._client.send('Page.captureScreenshot', { format, quality: options.quality, clip });
+     if (shouldSetDefaultBackground)
        await this._client.send('Emulation.setDefaultBackgroundColorOverride');
  
+     if (options.fullPage && this._viewport)
        await this.setViewport(this._viewport);
  
+     const buffer = options.encoding === 'base64' ? result.data : Buffer.from(result.data, 'base64');
      if (options.path)
        await writeFileAsync(options.path, buffer);
      return buffer;
***************
*** 840,846 ****
      let paperHeight = 11;
      if (options.format) {
        const format = Page.PaperFormats[options.format.toLowerCase()];
-       console.assert(format, 'Unknown paper format: ' + options.format);
        paperWidth = format.width;
        paperHeight = format.height;
      } else {
--- 903,909 ----
      let paperHeight = 11;
      if (options.format) {
        const format = Page.PaperFormats[options.format.toLowerCase()];
+       assert(format, 'Unknown paper format: ' + options.format);
        paperWidth = format.width;
        paperHeight = format.height;
      } else {
***************
*** 853,858 ****
      const marginLeft = convertPrintParameterToInches(marginOptions.left) || 0;
      const marginBottom = convertPrintParameterToInches(marginOptions.bottom) || 0;
      const marginRight = convertPrintParameterToInches(marginOptions.right) || 0;
  
      const result = await this._client.send('Page.printToPDF', {
        landscape: landscape,
--- 916,922 ----
      const marginLeft = convertPrintParameterToInches(marginOptions.left) || 0;
      const marginBottom = convertPrintParameterToInches(marginOptions.bottom) || 0;
      const marginRight = convertPrintParameterToInches(marginOptions.right) || 0;
+     const preferCSSPageSize = options.preferCSSPageSize || false;
  
      const result = await this._client.send('Page.printToPDF', {
        landscape: landscape,
***************
*** 867,873 ****
        marginBottom: marginBottom,
        marginLeft: marginLeft,
        marginRight: marginRight,
-       pageRanges: pageRanges
      });
      const buffer = Buffer.from(result.data, 'base64');
      if (options.path)
--- 931,938 ----
        marginBottom: marginBottom,
        marginLeft: marginLeft,
        marginRight: marginRight,
+       pageRanges: pageRanges,
+       preferCSSPageSize: preferCSSPageSize
      });
      const buffer = Buffer.from(result.data, 'base64');
      if (options.path)
***************
*** 886,892 ****
     * @param {!{runBeforeUnload: (boolean|undefined)}=} options
     */
    async close(options = {runBeforeUnload: undefined}) {
-     console.assert(!!this._client._connection, 'Protocol error: Connection closed. Most likely the page has been closed.');
      const runBeforeUnload = !!options.runBeforeUnload;
      if (runBeforeUnload) {
        await this._client.send('Page.close');
--- 951,957 ----
     * @param {!{runBeforeUnload: (boolean|undefined)}=} options
     */
    async close(options = {runBeforeUnload: undefined}) {
+     assert(!!this._client._connection, 'Protocol error: Connection closed. Most likely the page has been closed.');
      const runBeforeUnload = !!options.runBeforeUnload;
      if (runBeforeUnload) {
        await this._client.send('Page.close');
***************
*** 1019,1025 ****
    'JSHeapTotalSize',
  ]);
  
- /** @enum {string} */
  Page.PaperFormats = {
    letter: {width: 8.5, height: 11},
    legal: {width: 8.5, height: 14},
--- 1091,1097 ----
    'JSHeapTotalSize',
  ]);
  
+ /** @enum {!{width: number, height: number}} */
  Page.PaperFormats = {
    letter: {width: 8.5, height: 11},
    legal: {width: 8.5, height: 14},
***************
*** 1065,1071 ****
        valueText = text;
      }
      const value = Number(valueText);
-     console.assert(!isNaN(value), 'Failed to parse parameter value: ' + text);
      pixels = value * unitToPixels[unit];
    } else {
      throw new Error('page.pdf() Cannot handle parameter type: ' + (typeof parameter));
--- 1137,1143 ----
        valueText = text;
      }
      const value = Number(valueText);
+     assert(!isNaN(value), 'Failed to parse parameter value: ' + text);
      pixels = value * unitToPixels[unit];
    } else {
      throw new Error('page.pdf() Cannot handle parameter type: ' + (typeof parameter));
***************
*** 1091,1107 ****
    FrameNavigated: 'framenavigated',
    Load: 'load',
    Metrics: 'metrics',
  };
  
- /**
-  * @typedef {Object} Page.Viewport
-  * @property {number} width
-  * @property {number} height
-  * @property {number=} deviceScaleFactor
-  * @property {boolean=} isMobile
-  * @property {boolean=} isLandscape
-  * @property {boolean=} hasTouch
-  */
  
  /**
   * @typedef {Object} Network.Cookie
--- 1163,1172 ----
    FrameNavigated: 'framenavigated',
    Load: 'load',
    Metrics: 'metrics',
+   WorkerCreated: 'workercreated',
+   WorkerDestroyed: 'workerdestroyed',
  };
  
  
  /**
   * @typedef {Object} Network.Cookie
***************
*** 1135,1141 ****
    /**
     * @param {string} type
     * @param {string} text
-    * @param {!Array<*>} args
     */
    constructor(type, text, args = []) {
      this._type = type;
--- 1200,1206 ----
    /**
     * @param {string} type
     * @param {string} text
+    * @param {!Array<!Puppeteer.JSHandle>} args
     */
    constructor(type, text, args = []) {
      this._type = type;
***************
*** 1158,1164 ****
    }
  
    /**
-    * @return {!Array<string>}
     */
    args() {
      return this._args;
--- 1223,1229 ----
    }
  
    /**
+    * @return {!Array<!Puppeteer.JSHandle>}
     */
    args() {
      return this._args;
***************
*** 1166,1170 ****
  }
  
  
- module.exports = Page;
  helper.tracePublicAPI(Page);
--- 1231,1235 ----
  }
  
  
+ module.exports = {Page};
  helper.tracePublicAPI(Page);
